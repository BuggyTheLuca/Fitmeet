generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id                    String @id @default(uuid()) @db.Uuid
  name                  String
  email                 String @unique
  cpf                   String @unique
  password              String
  avatar                String?
  xp                    Int @default(0)
  level                 Int @default(1)
  deletedAt             DateTime?

  activities            Activity[]
  achievements          UserAchievement[]
  preferences           Preferences[]
  participants          ActivityParticipant[]

  @@map("users")
}


model Achievement {
  id                String @id @default(uuid()) @db.Uuid
  name              String @unique
  criterion         String

  userAchievements  UserAchievement[]

  @@map("achievements")
}

model UserAchievement {
  id              String @id @default(uuid()) @db.Uuid


  user            User @relation(fields: [userId], references: [id])
  userId          String       @db.Uuid


  achievement     Achievement @relation(fields: [achievementId], references: [id])
  achievementId   String       @db.Uuid

  @@map("user_achievements")
}

model ActivityType {
  id              String       @id @default(uuid()) @db.Uuid
  name            String
  description     String?
  image           String?

  activities      Activity[]
  preferences     Preferences[]

  @@map("activity_types")
}

model Activity {
  id                    String       @id @default(uuid()) @db.Uuid
  title                 String
  description           String?
  confirmationCode      String?
  image                 String?
  scheduledDate         DateTime
  createdAt             DateTime     @default(now())
  deletedAt             DateTime?
  completedAt           DateTime?
  private               Boolean      @default(false)
  
  participants          ActivityParticipant[]
  address               ActivityAddress?

  creator               User @relation(fields: [creatorId], references: [id])
  creatorId             String       @db.Uuid

  type                  ActivityType @relation(fields: [typeId], references: [id])
  typeId                String       @db.Uuid

  @@map("activities")
}

model ActivityParticipant {
  id                String       @id @default(uuid()) @db.Uuid
  approved          Boolean?
  confirmedAt       DateTime?

  user              User @relation(fields: [userId], references: [id])
  userId            String       @db.Uuid

  activity          Activity @relation(fields: [activityId], references: [id])
  activityId        String       @db.Uuid

  @@map("activity_participants")
}


model Preferences {
  id              String       @id @default(uuid()) @db.Uuid

  user            User @relation(fields: [userId], references: [id])
  userId          String       @db.Uuid

  type            ActivityType @relation(fields: [typeId], references: [id])
  typeId          String       @db.Uuid

  @@map("preferences")
}

model ActivityAddress {
  id              String       @id @default(uuid()) @db.Uuid
  latitude        Float
  longitude       Float

  activity        Activity @relation(fields: [activityId], references: [id])
  activityId      String       @db.Uuid @unique

  @@map("activity_addresses")
}